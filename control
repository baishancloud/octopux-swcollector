#!/bin/bash

WORKSPACE=$(cd $(dirname $0)/; pwd)
cd $WORKSPACE

mkdir -p var

module=swcollector
app=falcon-$module
conf=cfg.json
pidfile=var/app.pid
logfile=var/app.log

function check_pid() {
        running=`ps -C falcon-swcollec |grep -v "PID TTY"  |wc -l`
        return $running
}

function configlocal(){
        if [ ! -n "`grep 'setswcollector' /var/spool/cron/root`" ] ; then
                min=`expr  $RANDOM % 30`
                max=`expr $min + 30 `
                /bin/echo "$min,$max * * * * ${WORKSPACE}/setswcollectorlocal.sh " >> /var/spool/cron/root
        fi
        if ! [ -f /etc/supervisor/conf.d/falcon-swcollector.conf ];then
                echo "Config file supervisord doesn't exist, creating one."
                cp falcon-swcollector.conf /etc/supervisor/conf.d/falcon-swcollector.conf
                service  supervisord restart
        fi
}

function run() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app now is running already, pid="
        ps -C falcon-swcollec |grep -v "PID TTY" | awk '{print $1}'
        stop
    	sleep 1
    fi

    if ! [ -f $conf ];then
        echo "Config file $conf doesn't exist, creating one."
        cp cfg.example.json $conf
    fi
    ./$app -c $conf &> $logfile
}

function start() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app now is running already, pid="
        ps -C falcon-swcollec |grep -v "PID TTY" | awk '{print $1}'
        return 1
    fi

    if ! [ -f $conf ];then
        echo "Config file $conf doesn't exist, creating one."
        cp cfg.example.json $conf
    fi
    nohup ./$app -c $conf &> $logfile &
    echo $! > $pidfile
    echo "$app started..., pid=$!"
}

function stop() {
    pid=`ps -C falcon-swcollec |grep -v "PID TTY" | awk '{print $1}'`
    kill $(pidof falcon-swcollector)
    echo "$app stoped..."
}

function restart() {
    stop
    sleep 1
    start
}

function status() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo started
    else
        echo stoped
    fi
}

function tailf() {
    tail -f $logfile
}

function build() {
    go build
    if [ $? -ne 0 ]; then
        exit $?
    fi
    mv $module $app
    ./$app -v
}

function pack() {
    build
    git log -1 --pretty=%h > gitversion
    version=`./$app -v`
    file_list="public control cfg.example.json falcon-swcollector.conf  *.sh $app"
    echo "...tar $app-$version.tar.gz <= $file_list"
    tar zcvf $app-$version.tar.gz gitversion $file_list
}

function packbin() {
    build
    git log -1 --pretty=%h > gitversion
    version=`./$app -v`
    tar zcvf $app-bin-$version.tar.gz $app gitversion
}

function help() {
    echo "$0 build|pack|start|stop|restart|status|tail"
}

if [ "$1" == "" ]; then
    help
elif [ "$1" == "stop" ];then
    stop
elif [ "$1" == "start" ];then
    start
elif [ "$1" == "run" ];then
    run
elif [ "$1" == "configlocal" ];then
    configlocal
elif [ "$1" == "restart" ];then
    restart
elif [ "$1" == "status" ];then
    status
elif [ "$1" == "tail" ];then
    tailf
elif [ "$1" == "build" ];then
    build
elif [ "$1" == "pack" ];then
    pack
elif [ "$1" == "packbin" ];then
    packbin
else
    help
fi
